// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: exchange_rates.sql

package db

import (
	"context"
)

const createExchangeRate = `-- name: CreateExchangeRate :one
INSERT INTO exchange_rates (
  base_currency,
  target_currency,
  exchange_rate
) VALUES (
  $1, $2, $3
) RETURNING id, base_currency, target_currency, exchange_rate, created_at
`

type CreateExchangeRateParams struct {
	BaseCurrency   string `json:"base_currency"`
	TargetCurrency string `json:"target_currency"`
	ExchangeRate   string `json:"exchange_rate"`
}

func (q *Queries) CreateExchangeRate(ctx context.Context, arg CreateExchangeRateParams) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, createExchangeRate, arg.BaseCurrency, arg.TargetCurrency, arg.ExchangeRate)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.TargetCurrency,
		&i.ExchangeRate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExchangeRate = `-- name: DeleteExchangeRate :exec
DELETE FROM exchange_rates
WHERE id = $1
`

func (q *Queries) DeleteExchangeRate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExchangeRate, id)
	return err
}

const getExchangeRate = `-- name: GetExchangeRate :one
SELECT id, base_currency, target_currency, exchange_rate, created_at FROM exchange_rates
WHERE base_currency = $1
AND target_currency = $2
LIMIT 1
`

type GetExchangeRateParams struct {
	BaseCurrency   string `json:"base_currency"`
	TargetCurrency string `json:"target_currency"`
}

func (q *Queries) GetExchangeRate(ctx context.Context, arg GetExchangeRateParams) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, getExchangeRate, arg.BaseCurrency, arg.TargetCurrency)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.TargetCurrency,
		&i.ExchangeRate,
		&i.CreatedAt,
	)
	return i, err
}

const listExchangeRates = `-- name: ListExchangeRates :many
SELECT id, base_currency, target_currency, exchange_rate, created_at FROM exchange_rates
ORDER BY base_currency ASC
`

func (q *Queries) ListExchangeRates(ctx context.Context) ([]ExchangeRate, error) {
	rows, err := q.db.QueryContext(ctx, listExchangeRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExchangeRate{}
	for rows.Next() {
		var i ExchangeRate
		if err := rows.Scan(
			&i.ID,
			&i.BaseCurrency,
			&i.TargetCurrency,
			&i.ExchangeRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExchangeRate = `-- name: UpdateExchangeRate :one
UPDATE exchange_rates SET
  exchange_rate = $2
WHERE id = $1
RETURNING id, base_currency, target_currency, exchange_rate, created_at
`

type UpdateExchangeRateParams struct {
	ID           int64  `json:"id"`
	ExchangeRate string `json:"exchange_rate"`
}

func (q *Queries) UpdateExchangeRate(ctx context.Context, arg UpdateExchangeRateParams) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, updateExchangeRate, arg.ID, arg.ExchangeRate)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.TargetCurrency,
		&i.ExchangeRate,
		&i.CreatedAt,
	)
	return i, err
}
